#include "Global.inc"
#ifndef USE_JAVA_MOBILE
import java.util.ArrayList;
public class RDParser {
	private char[] input;
	private int parsingPosition;
	private boolean[] isLeftAssociative;
	private boolean[] isBinary;
	private boolean[] isOperator;
	private int[] presedence;
	protected boolean parseError;
	public class flup {
		protected String s;
		protected int i;
		public flup(String str, int val) {
			this.s=str;
			this.i=val;
		}
	}
	VECTOR(flup) vars;
	public RDParser() {
		isLeftAssociative=new boolean[256];
		isBinary=new boolean[256];
		isOperator=new boolean[256];
		presedence= new int[256];
		isOperator['+']=true;
		isOperator['-']=true;
		isOperator['*']=true;
		isOperator['/']=true;
		isOperator['^']=true;
		isOperator['&']=true;
		isOperator['|']=true;
		isOperator['~']=true;
		isLeftAssociative['+']=true;
		isLeftAssociative['-']=true;
		isLeftAssociative['*']=true;
		isLeftAssociative['/']=true;
		isLeftAssociative['^']=false;
		isLeftAssociative['&']=true;
		isLeftAssociative['|']=true;
		isLeftAssociative['~']=false;
		isBinary['+']=true;
		isBinary['-']=true;
		isBinary['*']=true;
		isBinary['/']=true;
		isBinary['^']=true;
		isBinary['&']=true;
		isBinary['|']=true;
		isBinary['~']=false;
		presedence['|']=0;
		presedence['&']=1;
		presedence['+']=2;
		presedence['-']=2;
		presedence['~']=2;
		presedence['*']=3;
		presedence['/']=3;
		presedence['^']=4;
		vars=new VECTOR(flup)();
	}

	private int Next() {
		if(parsingPosition<input.length)
			return input[parsingPosition];
		else
			return -1;
	}

	private boolean Expect(int e) {
		if(Next()==e) {
			Consume();
			return true;
			}
		else {
			PRINTLN("Error: Expected '"+((char)e)+"'");
			parseError=true;
			return false;
		}
	}
	private void Consume() {
		if(parsingPosition<input.length) ++parsingPosition;
	}

	public void addVariable(String str, int value) {
		vars.add(new flup(str, value));
	}

	public void removeVariables() {
		vars=new VECTOR(flup)();
	}

	private boolean inBase(int Base, char c) {
		switch(Base) {
			case 0: //alphanumeric
				if((c>='A')&&(c<='Z')) return true;
				if((c>='a')&&(c<='z')) return true;
				return false;
			case 16:
				if((c>='A')&&(c<='F')) return true;
				if((c>='a')&&(c<='f')) return true;
				if((c>='0')&&(c<='9')) return true;
				return false;
			case 10:
			default:
				if((c>='0')&&(c<='9')) return true;
				return false;
		}
	}

	public int StrToInt(String in) {
		String s=in.trim();
		try {
			int i=s.indexOf("$");
			if(i>-1) { //Hex
				return Integer.parseInt( s.substring(i+1), 16 );
			}
			else {
				return Integer.parseInt( s, 10 );
			}
		}
		catch ( NumberFormatException ee ) {
				PRINTLN( ee.getMessage() + " is not a valid format for an integer." );
		}
		return -1;
	}


	private int symNumber(String ident, int Base) {
		int n=0;
		int i=0;
		String s="";
// 		PRINTLN(ident+"symNumber: base="+Base);
		switch(Base) {
			case 16:
				++i; //skip '$'
				while((i+parsingPosition<input.length) && inBase(16, input[parsingPosition+i])) {
					s+=input[parsingPosition+i];
					++i;
				}
				parsingPosition+=i;
				return StrToInt("$"+s);
			case 10:
			default:
				while((i+parsingPosition<input.length) && inBase(10, input[parsingPosition+i])) {
					s+=input[parsingPosition+i];
					++i;
				}
				parsingPosition+=i;
				return StrToInt(s);
		}
	}

	private flup checkVariable() {
		int i=0;
		flup f=null;
		String s="";
		while((i+parsingPosition<input.length) && inBase(0, input[parsingPosition+i])) {
					s+=input[parsingPosition+i];
					++i;
				}
		for(int k=0; k<vars.size(); ++k) {
			flup ff=vars.get(k);
			if(ff.s.equals(s)) f=ff;
		}
		return f;
	}

	private int P(String ident) {
		flup f=checkVariable();
// 		PRINTLN(ident+"P() Next()="+((char)Next())+" f="+f);
		if(isOperator[Next()]&&(!isBinary[Next()])) {
			int op=Next();
			Consume();
			switch(op) {
				case '~':
					return -Expr(presedence[op],ident+"  ");
				default:
					PRINTLN(ident+"Unknown unary operator '"+((char)op)+"'");
					return -1;
			}
		}
		else if(Next()=='(') {
			Consume();
// 			PRINTLN(ident+"parsing '(' next="+((char)Next()));
			int t=Expr(0, ident+"  ");
// 			PRINTLN(ident+"expecting ')', t="+t+" next="+((char)Next()));
			if(Expect(')'))
				return t;
			else
				return -1;
		}
		else if( (Next()>='0') && (Next()<='9')) {
			int t=symNumber(ident+"  ", 10);
			return t;
		}
		else if(Next()=='$') { //Hexnumber
			int t=symNumber(ident+"  ",16);
			return t;
		}
		else if(f!=null) {
// 			PRINTLN(ident+"Found a variable : "+f.s+" value="+f.i);
			parsingPosition+=f.s.length();
			return f.i;
		}
		else {
			PRINTLN(ident+"Error: No case for P('"+((char)Next())+"')");
			parseError=true;
			return -1;
		}
	}

	private int Expr(int p, String ident) {
// 		PRINTLN(ident+"Expr("+p+") Next()="+((char)Next()));
		int t1=P(ident+"  ");
// 		PRINTLN(ident+"t1="+t1);
		while((Next()!=-1) &&isBinary[Next()] && presedence[Next()]>=p ) {
			int op = Next();
// 			PRINTLN(ident+"Expr while Next()="+((char)Next())+" isleftass="+isLeftAssociative[op]);
			Consume();
			int t2=0;
			if(isLeftAssociative[op])
				t2=Expr(presedence[op]+1, ident+"  ");
			else
				t2=Expr(presedence[op], ident+"  ");
// 			PRINTLN(ident+"t2="+t2);
// 			PRINTLN(ident+"op="+((char)op));
			switch(op) {
				case '+':
// 					PRINTLN(ident+"t1="+t1+" t2="+t2+" t1+t2="+(t1+t2));
					t1= t1+t2;
					break;
				case '-':
// 					PRINTLN(ident+"t1="+t1+" t2="+t2+" t1-t2="+(t1-t2));
					t1= t1-t2;
					break;
				case '*':
// 					PRINTLN(ident+"t1="+t1+" t2="+t2+" t1*t2="+(t1*t2));
					t1= t1*t2;
					break;
				case '/':
// 					PRINTLN(ident+"t1="+t1+" t2="+t2+" t1/t2="+(t1/t2));
					t1= t1/t2;
					break;
				case '^':
// 					PRINTLN(ident+"t1="+t1+" t2="+t2+" t1^t2="+(int)Math.round(Math.pow(t1, t2)));
					t1= (int)Math.round(Math.pow(t1, t2));
					break;
				case '&':
// 					PRINTLN(ident+"t1="+t1+" t2="+t2+" t1&t2="+(t1&t2));
					t1= t1&t2;
					break;
				case '|':
// 					PRINTLN(ident+"t1="+t1+" t2="+t2+" t1|t2="+(t1|t2));
					t1= t1|t2;
					break;
				default:
					PRINTLN(ident+"Unknown binary operator '"+((char)op)+"'");
					return -1;
				}
		}
		return t1;
	}

	public int Evaluate(String str) {
		if(str!=null && str.length()>0) {
			input = str.toCharArray();
			int i=0;
			int j=1;
			while((j!=str.length()) && (i!=str.length()) ){
				if(input[i]==' ') {
					input[i]=input[j];
					input[j++]=' ';
					}
				else {++i;}
			}
// 			PRINTLN(input);
			parsingPosition=0;
			parseError=false;
			int r=Expr(0, "");
			if(!parseError)
				return r;
			else return
				-1;
		}
		else return -1;
	}

	public static void main( String[] args ) {
		RDParser parser=new RDParser();
		//PRINTLN(parser.Evaluate("  -   2*(3+ 2^ (4-1  ) )"));
		//PRINTLN(parser.Evaluate("(12+34)*5"));
		//PRINTLN("--------------------------");
		parser.addVariable("A", 1);
		parser.addVariable("B", 2);
		parser.addVariable("HL", 3);
		if(args.length>0) PRINTLN(parser.Evaluate(args[0]));
	}
}
#else
public class RDParser {} // DUMMY FOR 1.4.2
#endif
