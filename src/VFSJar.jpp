import java.io.InputStream;
import java.io.OutputStream;
import java.io.DataInputStream;
import java.util.Enumeration;
import java.util.Vector;

public class VFSJar implements IVFSNode {
	private String path;
	private String name;

	VFSJar(String name, String path)
	{
		this.path = path;
		this.name = name;
	}

	public boolean exists()
	{
		return true;
	};

	public boolean isFile()
	{
		return !isDir();
	}

	public boolean isDir()
	{
		return path.endsWith("/");
	}

	public String getURL()
	{
		return "jar://" + path;
	}

	public String getName()
	{
		return name;
	}

	/* for files */
	public InputStream getInputStream()
	{
		if (!isFile()) return null;
		return this.getClass().getResourceAsStream(path);
	}

	public OutputStream getOutputStream()
	{
		return null;
	}

	/* for dirs */
	public Enumeration<IVFSNode> getChildren()
	{
		if (!isDir()) return null;
		Vector<IVFSNode> children = new Vector<IVFSNode>();

		try {
			DataInputStream br = new DataInputStream(this.getClass().getResourceAsStream(path + "vfsjar.idx"));
			while (true) {
				String child = "";
				char c;
				c = (char)br.readByte();
				while (c != '\r' && c != '\n') {
					child += c;
					c = (char)br.readByte();
				}
				if (child.length() > 0)
					children.addElement(new VFSJar(child, path + child));
			}
		} catch (Throwable e) {
		}
		return children.elements();
	}

	public IVFSNode createFile(String name)
	{
		return null;
	}

	public IVFSNode createDir(String name)
	{
		return null;
	}

	public void delete(String name)
	{
	}
};
