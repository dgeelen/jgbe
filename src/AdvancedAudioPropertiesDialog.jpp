#include "Global.inc"
#ifndef USE_JAVA_MOBILE
import java.io.*;
import javax.sound.sampled.*;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

import javax.swing.*;
import javax.swing.event.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;

public class AdvancedAudioPropertiesDialog implements ComponentListener, ChangeListener, ActionListener {
	JFrame owner;
	AudioDriver ad;
	JDialog dialog;
	JSlider audioWriteInterval;
	JSlider audioBufferSize;

	public AdvancedAudioPropertiesDialog(JFrame o) { // DO NOT USE THIS CONSTRUCTOR
		ASSERT(false);
	}

// 	int[] samplingRates = {4000, 8000, 11025, 22050, 44100};
	VECTOR(Integer) samplingRates = new VECTOR(Integer)();
	VECTOR(Mixer.Info) mixers = new VECTOR(Mixer.Info)();
	private JComboBox<String> outputDevices;
	private JCheckBox useStereo;
	private JSlider samplingRateSlider;
	private JSpinner samplingRateSpinner;
	private JSlider bufferSizeSlider;
	private JSpinner bufferSizeSpinner;
	private JSlider outputIntervalSlider;
	private JSpinner outputIntervalSpinner;
	swinggui gui;

	public AdvancedAudioPropertiesDialog(JFrame o, AudioDriver ad, swinggui gui) {
		owner = o;
		this.ad = ad;
		this.gui = gui;
		dialog= new JDialog(owner, "Advanced Audio Properties", true);
/*		dialog.setSize(new Dimension(640,480));
		dialog.setPreferredSize(new Dimension(640,480));*/
		dialog.setResizable(false);
		/* Setting Components */
		if(ad != null) {
			outputDevices = new JComboBox<String>();
			Mixer.Info FixUp = ad.getMixerInfo();
			ad.stop();
			Mixer.Info[] mixers = AudioSystem.getMixerInfo();
			for (int i = 0; i < mixers.length; i++) {
				Mixer mixer = AudioSystem.getMixer(mixers[i]);
// 				PRINTLN(mixer.getMixerInfo());
				Line.Info[] info = mixer.getSourceLineInfo();
				boolean b = false;
				for(int j=0; j < info.length; ++j) {
// 					PRINTLN("    "+info[j]);
					if(info[j].toString().indexOf("buffer") >= 0)
						b = true;
				}
				if(b) {
					this.mixers.add(mixers[i]);
					outputDevices.addItem(mixers[i].getName());
/* This attempts to query available sampling rates from the system,
 * but it doesn't seem to work as intended, and always returns -1 (AudioSystem.NOT_SPECIFIED).
 * I think this means we can just guess-o-matic a set of sampling rates?
 *
 *				Line.Info[] infos = AudioSystem.getMixer(mixers[i]).getSourceLineInfo();
 *				PRINTLN(infos);
 *				for (int l = 0; l < infos.length; ++l) {
 *					if (infos[l] instanceof DataLine.Info) {
 *						DataLine.Info dataLineInfo = (DataLine.Info) infos[l];
 *						AudioFormat[] supportedFormats = dataLineInfo.getFormats();
 *						PRINTLN(dataLineInfo);
 *						for(int j = 0; j < supportedFormats.length; ++j) {
 *							PRINTLN(supportedFormats[j]);
 *							Integer k = new Integer((int)supportedFormats[j].getSampleRate());
 *							if(!samplingRates.contains(k)) {
 *								samplingRates.add(k);
 *								PRINTLN(k);
 *							}
 *						}
 *					}
 *				}
 */
				}
			}
			ad.start();
			for(int i=0; i<outputDevices.getItemCount(); ++i) {
				if(((this.mixers.get(i))).equals(ad.getMixerInfo())) outputDevices.setSelectedIndex(i);
			}
			/* Set a set of predetermined samplingRates (which may or may not be supported by any line),
			 * instead of asking the current mixer which samplingRates it supports
			 */
			samplingRates.add(new Integer(   8000));
			samplingRates.add(new Integer(  11025));
			samplingRates.add(new Integer(  22050));
			samplingRates.add(new Integer(  32000));
			samplingRates.add(new Integer(  44056));
			samplingRates.add(new Integer(  44100));
			samplingRates.add(new Integer(  47250));
			samplingRates.add(new Integer(  48000));
// 			samplingRates.add(new Integer(  50000));
// 			samplingRates.add(new Integer(  50400));
// 			samplingRates.add(new Integer(  88200));
// 			samplingRates.add(new Integer(  96000));
// 			samplingRates.add(new Integer( 176400));
// 			samplingRates.add(new Integer( 192000));
// 			samplingRates.add(new Integer(2822400));

			useStereo = new JCheckBox("Stereo output");
			useStereo.setSelected( ad.getChannels() == 2 );
			samplingRateSlider = new JSlider(0, samplingRates.size()-1);
			samplingRateSlider.setPaintTicks(true);
			samplingRateSlider.setSnapToTicks(true);
			samplingRateSlider.setPaintTrack(true);
			samplingRateSlider.setPaintLabels(true);
			samplingRateSlider.updateUI();
			VECTOR(Integer) sr = new VECTOR(Integer)();
			for(int i=0; i<samplingRates.size(); ++i) sr.add(samplingRates.get(i));
			samplingRateSpinner = new JSpinner(new SpinnerListModel(sr));
			bufferSizeSlider = new JSlider(1<<5, 1<<16);
			bufferSizeSpinner = new JSpinner(new SpinnerNumberModel(1<<5, 1, 1<<16, 1));
			bufferSizeSlider.setValue(ad.getBufferSize());
			bufferSizeSpinner.setValue(new Integer(ad.getBufferSize()));
			outputIntervalSlider = new JSlider(0, bufferSizeSlider.getMaximum());
			outputIntervalSpinner = new JSpinner(new SpinnerNumberModel(ad.getOutputInterval(),1,ad.getBufferSize(),ad.getFrameSize()));
			outputIntervalSlider.setValue(ad.getOutputInterval());
			outputIntervalSpinner.setValue(new Integer(ad.getOutputInterval()));

			samplingRateSlider.setValue( samplingRates.indexOf(new Integer(ad.getSampleRate()) ));//Default driver rate
			samplingRateSpinner.setValue(new Integer(ad.getSampleRate()));
			bufferSizeSlider.setValue(ad.getBufferSize());
			bufferSizeSpinner.setValue(new Integer(ad.getBufferSize()));
			outputIntervalSlider.setValue(ad.getOutputInterval());
			outputIntervalSpinner.setValue(new Integer(ad.getOutputInterval()));

			useStereo.addChangeListener(this);
			outputDevices.addActionListener(this);
			bufferSizeSlider.addChangeListener(this);
			bufferSizeSpinner.addChangeListener(this);
			samplingRateSlider.addChangeListener(this);
			samplingRateSpinner.addChangeListener(this);
			outputIntervalSlider.addChangeListener(this);
			outputIntervalSpinner.addChangeListener(this);

			BorderLayout bl = new BorderLayout();
			dialog.setLayout(bl);
			JPanel container = new JPanel();
			container.setLayout(new GridLayout(8,2));
			container.add(new JLabel("Output device:"));
			container.add(new JPanel());
			container.add(outputDevices);
			container.add(useStereo);
			container.add(new JLabel("Sampling rate:"));
			container.add(new JPanel());
			container.add(samplingRateSlider);
			container.add(samplingRateSpinner);
			container.add(new JLabel("Buffer size:"));
			container.add(new JPanel());
			container.add(bufferSizeSlider);
			container.add(bufferSizeSpinner);
			container.add(new JLabel("Output interval:"));
			container.add(new JPanel());
			container.add(outputIntervalSlider);
			container.add(outputIntervalSpinner);
			dialog.add(new JPanel(), BorderLayout.NORTH);
			dialog.add(new JPanel(), BorderLayout.SOUTH);
			dialog.add(new JPanel(), BorderLayout.WEST);
			dialog.add(new JPanel(), BorderLayout.EAST);
			dialog.add(container, BorderLayout.CENTER);
		}
		dialog.addComponentListener(this);
		dialog.setLocationRelativeTo(null);
		dialog.pack();

		Dimension d = owner.getSize();
		Point     p = new Point();
		p.setLocation((owner.getLocation().getX()+(d.getWidth()/2)) - (dialog.getWidth()/2), (owner.getLocation().getY()+d.getHeight()/2)-(dialog.getHeight()/2));
		dialog.setLocation(p);
	}



	public void showWindow() {
			dialog.setVisible( true );
	}

	public void actionPerformed( ActionEvent e ) {
		if(e.getSource().equals( outputDevices )) {
			ad.setMixerInfo(mixers.get(outputDevices.getSelectedIndex()));
			gui.saveConfig();
		}
	}

	public void stateChanged( ChangeEvent e) {
		if(e.getSource().equals( samplingRateSlider )) {
			samplingRateSpinner.setValue(samplingRates.get(samplingRateSlider.getValue()));
			ad.setSampleRate((samplingRates.get(samplingRateSlider.getValue())).intValue());
			gui.saveConfig();
		}
		else if(e.getSource().equals( samplingRateSpinner )) {
			for(int i=0; i<samplingRates.size(); ++i) {
				if(samplingRateSpinner.getValue() == samplingRates.get(i))
					samplingRateSlider.setValue(i);
			}
			ad.setSampleRate((samplingRates.get(samplingRateSlider.getValue())).intValue());
			gui.saveConfig();
		}
		else if(e.getSource().equals( bufferSizeSlider )) {
			ad.setBufferSize(bufferSizeSlider.getValue());
			bufferSizeSlider.setValue(ad.getBufferSize());
			bufferSizeSpinner.setValue(new Integer(ad.getBufferSize()));
			outputIntervalSlider.setMaximum( ad.getBufferSize());
			outputIntervalSlider.setValue(ad.getOutputInterval());
			outputIntervalSpinner.setModel(new SpinnerNumberModel(ad.getOutputInterval(),1,ad.getBufferSize(),ad.getFrameSize()));
			gui.saveConfig();
		}
		else if(e.getSource().equals( bufferSizeSpinner )) {
			ad.setBufferSize(((Integer)bufferSizeSpinner.getValue()).intValue());
			bufferSizeSlider.setValue(ad.getBufferSize());
			bufferSizeSpinner.setValue(new Integer(ad.getBufferSize()));
			outputIntervalSlider.setMaximum( ad.getBufferSize());
			outputIntervalSlider.setValue(ad.getOutputInterval());
			outputIntervalSpinner.setModel(new SpinnerNumberModel(ad.getOutputInterval(),1,ad.getBufferSize(),ad.getFrameSize()));
			gui.saveConfig();
		}
		else if(e.getSource().equals( outputIntervalSlider )) {
			ad.setOutputInterval( outputIntervalSlider.getValue() );
			outputIntervalSpinner.setValue( new Integer(ad.getOutputInterval()));
			outputIntervalSlider.setValue( ad.getOutputInterval());
			gui.saveConfig();
		}
		else if(e.getSource().equals( outputIntervalSpinner )) {
			ad.setOutputInterval( ((Integer)outputIntervalSpinner.getValue()).intValue() );
			outputIntervalSpinner.setValue( new Integer(ad.getOutputInterval()));
			outputIntervalSlider.setValue( ad.getOutputInterval());
			gui.saveConfig();
		}
		else if(e.getSource().equals( useStereo )) {
			if(useStereo.getModel().isSelected())
				ad.setChannels(2);
			else
				ad.setChannels(1);
			gui.saveConfig();
		}
	}
	public void componentHidden(ComponentEvent e) {}
	public void componentMoved(ComponentEvent e) {}
	public void componentShown(ComponentEvent e) {}
	public void componentResized(ComponentEvent e) {}
}
#endif
