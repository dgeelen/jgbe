#include "Global.inc"
#ifndef USE_JAVA_MOBILE
import java.io.*;

public class Disassembler
{
		public static final int SIMPLE_DISASSEMBLY = 0;
		public static final int EXTENDED_DISASSEMBLY = 1;
		private static int disasmmode = 0;
		private static Cartridge cart;
		#include "opcodes.inc"
		private static final String file_name = "instrs.txt";
		private static final char[] whitespace = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};//FIXME: this is crappy
		public static void setMode(int i) {
			disasmmode = i;
		}
		// Opcode: opcode to disassemble
		// BC:     whether opcode was after BC
		private static int regval(String reg) {
			if(reg.equalsIgnoreCase("A")) return CPU.A;
			if(reg.equalsIgnoreCase("B")) return CPU.B;
			if(reg.equalsIgnoreCase("C")) return CPU.C;
			if(reg.equalsIgnoreCase("D")) return CPU.D;
			if(reg.equalsIgnoreCase("E")) return CPU.E;
			if(reg.equalsIgnoreCase("H")) return CPU.H;
			if(reg.equalsIgnoreCase("L")) return CPU.L;
			if(reg.equalsIgnoreCase("AF")) return 0x10000|((CPU.A<<8)|CPU.F);
			if(reg.equalsIgnoreCase("BC")) return 0x10000|((CPU.B<<8)|CPU.C);
			if(reg.equalsIgnoreCase("DE")) return 0x10000|((CPU.D<<8)|CPU.E);
			if(reg.equalsIgnoreCase("HL")) return 0x10000|((CPU.H<<8)|CPU.L);
			if(reg.equalsIgnoreCase("SP")) return 0x10000|(CPU.SP);
			if(reg.equalsIgnoreCase("PC")) return 0x10000|(CPU.getPC());
			return -1;
		}

		public static final int instructionLength(int PC) { //Teh CopyPaste crappyness :)
			try {
				int instr=CPU.read(PC);
				int i=-1;
				int bytecount=1;
				String op="";
				if(instr==0xcb) {
					instr=CPU.read(PC+1);
					op = opcode[instr+0x100];
					bytecount=2;
				}
				else {
					op = opcode[instr];
				}
				i=op.indexOf("IMM08");
				if(i>-1) {
					bytecount=2;
				}
				i=op.indexOf("IMM16");
				if(i>-1) {
					bytecount=3;
				}
				i=op.indexOf("[n]");
				if(i>-1) { //specialcase
					bytecount=2;
				}
				i=op.indexOf("dd");
				if(i>-1) { //specialcase
					bytecount=2;
				}
				return bytecount;
			} catch (Exception e) {
				return 0;
			}
		}

		public static final String disassemble(int PC) {
			switch(disasmmode) {
				case 0:
					return simple_disassemble(PC);
				case 1:
					return extended_disassemble(PC);
				default:
					ASSERT(false);
					return "";
			}
		}

		private static final String extended_disassemble(int PC) {
			try {
			int instr=CPU.read(PC);
			int immediate=-1;
			int i=-1;
			int j=-1;
			int bytecount=1;
			String op="";
			if(instr==0xcb) {
				instr=CPU.read(PC+1);
				op = opcode[instr+0x100];
				bytecount=2;
			}
			else {
				op = opcode[instr];
			}
			String s=op;
			i=op.indexOf("IMM08");
			if(i>-1) {
				immediate= CPU.read(PC+1);
				if(op.indexOf("JR")>-1)
					immediate = (PC + 2) + (((immediate&0x80)!=0) ? (- ((immediate ^ 0xff)+1)) : immediate);
				s=STRFORMAT(op.substring(0,i)+"$%02x"+op.substring(i+5),immediate);
				bytecount=2;
			}
			i=op.indexOf("IMM16");
			if(i>-1) {
				immediate=(CPU.read(PC+2)<<8)|CPU.read(PC+1); //little endian
				s=STRFORMAT(op.substring(0,i)+"$%04x"+op.substring(i+5),immediate);
				bytecount=3;
			}

			i=op.lastIndexOf(" ");
			if(i>-1) {
				j=op.lastIndexOf(",", i-1);
				if(j>-1) {//2 parts
					//part 1
					if(op.charAt(i+1)=='[') { // ++i; j--; }; //TODO:Verify this does what I want
						immediate=regval(op.substring(i+2,op.indexOf("]",i+2)));
// 						immediate = (immediate>-1) ? CPU.read( immediate&0xffff ) : immediate;
						++i;
					}
					else {
						immediate=regval(op.substring(i+1));
					}
					if(immediate>-1) {
						if(immediate>0xffff) {
							s=STRFORMAT(s.substring(0,i+1)+"$%04x"+s.substring(i+3),immediate&0xffff);
							}
						else {
							s=STRFORMAT(s.substring(0,i+1)+"$%02x"+s.substring(i+2),immediate);
						}
					}
					//part 2
					i=op.lastIndexOf(" ",j);
					if(op.charAt(i+1)=='[') { // ++i; j--; }; //TODO:Verify this does what I want
						immediate=regval(op.substring(i+2,op.indexOf("]",i+2)));
						++i;
					}
					else {
						immediate=-1; //regval(op.substring(i+1,j));
					}
					if(immediate>-1) {
						if(immediate>0xffff) {
							s=STRFORMAT(s.substring(0,i+1)+"$%04x"+s.substring(i+3),immediate&0xffff);
							}
						else {
							s=STRFORMAT(s.substring(0,i+1)+"$%02x"+s.substring(i+2),immediate);
						}
					}
				}
				else { // only 1 part
					if(op.charAt(i+1)=='[') { // ++i; j--; }; //TODO:Verify this does what I want
						immediate=regval(op.substring(i+2,op.indexOf("]",i+2)));
						++i;
					}
					else {
						immediate=regval(op.substring(i+1));
					}
					if(immediate>-1) {
						if(immediate>0xffff) {
							s=STRFORMAT(s.substring(0,i+1)+"$%04x"+s.substring(i+3),immediate&0xffff);
						}
						else {
							s=STRFORMAT(s.substring(0,i+1)+"$%02x"+s.substring(i+2),immediate);
						}
					}
				}
			}
			i=s.indexOf("[n]");
			if(i>-1) { //specialcase
				immediate=CPU.read(PC+1);
				bytecount=2;
				if(op.indexOf("LDH")>-1) immediate|=0xff00;
				s=STRFORMAT(s.substring(0,i+1)+"$%04x"+s.substring(i+2),immediate);
// 				s=STRFORMAT(s.substring(0,i+1)+"$%02x"+s.substring(i+2),CPU.read(immediate|0xff00));
			}
			i=op.indexOf("dd");
			if(i>-1) { //specialcase
				immediate=CPU.read(PC+1);
				if(op.indexOf("(SP+dd)")>-1) {
					immediate ^= 0x80;
					immediate -= 0x80;
					immediate += CPU.SP;
				}
				bytecount=2;
			}

			String prefix=STRFORMAT("$%04x ",PC);
			for(i=0; i<bytecount;  ++i) {
				prefix+=STRFORMAT("$%02x ", CPU.read(PC+i));
			}
			for(i=0; i<3-bytecount; ++i){
				prefix+=STRFORMAT("    ", CPU.read(PC+i));
			}
			return prefix + op + (new String(whitespace, 0, 18 - op.length())) + "// " +s;
			}
			catch (Exception e) {
				return "";
			}
		}

		private static final String simple_disassemble(int PC) {
			try {
				int instr=CPU.read(PC);
				int immediate=-1;
				int bytecount=1;
				int i;
				String op="";
				if(instr==0xcb) {
					instr=CPU.read(PC+1);
					op = opcode[instr+0x100];
					bytecount=2;
				}
				else {
					op = opcode[instr];
				}
				String s=op;
				i=op.indexOf("IMM08");
				if(i>-1) {
					immediate = CPU.read(PC+1);
					if(op.indexOf("JR")>-1) immediate = (PC + 2) + (((immediate&0x80)!=0) ? (- ((immediate ^ 0xff)+1)) : immediate);
					s=STRFORMAT(op.substring(0,i)+"$%02x"+op.substring(i+5),immediate);
					bytecount=2;
				}
				i=op.indexOf("IMM16");
				if(i>-1) {
					immediate=(CPU.read(PC+2)<<8)|CPU.read(PC+1); //little endian
					s=STRFORMAT(op.substring(0,i)+"$%04x"+op.substring(i+5),immediate);
					bytecount=3;
				}
				i=s.indexOf("[n]");
				if(i>-1) { //specialcase
					immediate=CPU.read(PC+1);
					bytecount=2;
					s=STRFORMAT(s.substring(0,i+1)+"$%02x"+s.substring(i+2),immediate);
				}
				i=op.indexOf("dd");
				if(i>-1) { //specialcase
					immediate=CPU.read(PC+1);
					bytecount=2;
					s=STRFORMAT(s.substring(0,i)+"$%02x"+s.substring(i+2),immediate);
				}

				String prefix=STRFORMAT("$%04x: ",PC);
				for(i=0; i<bytecount;  ++i) {
					prefix+=STRFORMAT("$%02x ", CPU.read(PC+i));
				}
				for(; i<3; ++i) {
					prefix+="    ";
				}
				return prefix + " " + s;
			}
			catch (Exception e) {
				return "";
			}
		}


		public static void main(String[] args)
		{
				PRINTLN(Disassembler.disassemble(0));
				PRINTLN(Disassembler.disassemble(0));
				PRINTLN(Disassembler.disassemble(255));
				PRINTLN(Disassembler.disassemble(255));
		}
}
#else
public class Disassembler {} //DUMMY FOR 1.4.2
#endif
