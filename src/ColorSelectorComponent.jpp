#ifndef USE_JAVA_MOBILE

#include "Global.inc"

import javax.swing.*;
import javax.swing.text.*;
import javax.swing.event.*;
import javax.swing.border.*;
import javax.swing.colorchooser.*;
import java.awt.event.*;
import java.awt.*;
import java.awt.geom.Point2D;
import java.awt.geom.Line2D;
import java.util.*;

public class ColorSelectorComponent extends AbstractColorChooserPanel
{
  // color wheel
  public static final float WHEEL_WIDTH = 0.2f;

	private JPanel pnlCenter = new JPanel();
	private JPanel pnlSouth = new JPanel();
	private JPanel pnlHSVRGBCS = new JPanel();
	private JPanel pPanel = new JPanel();

	private RGBColorSelectorComponent RGBCSC = new RGBColorSelectorComponent(this);
	private HSVColorSelectorComponent HSVCSC = new HSVColorSelectorComponent(this);
	private HexRGBColorSelectorComponent HRGBCSC = new HexRGBColorSelectorComponent(this);
	private ExtendedHSVColorSelectorComponent EHSVSC = new ExtendedHSVColorSelectorComponent(this);

	private boolean updating = false;

	private static final long serialVersionUID = 1L; // prevent warning

	public ColorSelectorComponent()
	{
		buildChooser();
	}

	public String getDisplayName()
	{
		return "HSV Wheel";
	}

	public Icon getLargeDisplayIcon()
	{
		return new ImageIcon();
	}

	public Icon getSmallDisplayIcon()
	{
			return new ImageIcon();
	}

	public void updateChooser()
	{
		if (!updating)
			updateColors(this, getColorFromModel().getRed(), getColorFromModel().getGreen(), getColorFromModel().getBlue());
	}

	protected void buildChooser()
	{
		add(EHSVSC, BorderLayout.CENTER);

		pnlHSVRGBCS.setLayout(new GridLayout(3,1));
		pnlHSVRGBCS.add(RGBCSC);
		pnlHSVRGBCS.add(HSVCSC);
		pnlHSVRGBCS.add(HRGBCSC);
		add(pnlHSVRGBCS, BorderLayout.EAST);
	}

	int hackhack = 0;
	/*
	 * 0 <= r, g, b <= 255
	 */
	public void updateColors(JPanel caller, int r, int g, int b)
	{
		updating = true;
		//PRINTLN("ctor update rgb");
		//if (hackhack != 0) {
		//	int[] x = null;
		//	x[0]=1;
		//}
		getColorSelectionModel().setSelectedColor(new Color(r,g,b));

		//if (!caller.equals(RGBCSC))
			RGBCSC.updateColors(r, g, b);
		//if (!caller.equals(HSVCSC))
			HSVCSC.updateColors(r, g, b);
		//if (!caller.equals(EHSVSC))
			EHSVSC.updateColors(r, g, b);
		//if (!caller.equals(HRGBCSC))
			HRGBCSC.updateColors(r, g, b);

		updating = false;
	}

	public void updateColors(JPanel caller, double h, double s, double v)
	{
		updating = true;

		//PRINTLN("ctor update hsv");
		Color col = ColorConverter.hsvToColor(h, s, v);

		getColorSelectionModel().setSelectedColor(col);

		//if (!caller.equals(RGBCSC))
			RGBCSC.updateColors(h, s, v);
		//if (!caller.equals(HSVCSC))
			HSVCSC.updateColors(h, s, v);
		//if (!caller.equals(EHSVSC))
			EHSVSC.updateColors(h, s, v);
		//if (!caller.equals(HRGBCSC))
			HRGBCSC.updateColors(h, s, v);

		updating = false;
	}
}

class RGBColorSelectorComponent extends JPanel implements ChangeListener
{
	private JColoredSlider[] rgbSliders = {new JColoredSlider(ColorConverter.MIN_RED,
                                                            ColorConverter.MAX_RED,
                                                            ColorConverter.MIN_RED),  // r
	                                       new JColoredSlider(ColorConverter.MIN_GREEN,
                                                            ColorConverter.MAX_GREEN,
                                                            ColorConverter.MIN_GREEN),  // g
	                                       new JColoredSlider(ColorConverter.MIN_BLUE,
                                                            ColorConverter.MAX_BLUE,
                                                            ColorConverter.MIN_BLUE)}; // b

  private SpinnerNumberModel[] snms = { new SpinnerNumberModel(ColorConverter.MIN_RED,
                                                               ColorConverter.MIN_RED,
                                                               ColorConverter.MAX_RED,
                                                               1),
                                        new SpinnerNumberModel(ColorConverter.MIN_RED,
                                                               ColorConverter.MIN_RED,
                                                               ColorConverter.MAX_RED,
                                                               1),
                                        new SpinnerNumberModel(ColorConverter.MIN_RED,
                                                               ColorConverter.MIN_RED,
                                                               ColorConverter.MAX_RED,
                                                               1) };

  private JSpinner[] rgbSpinners = {new JSpinner(snms[0]),
                                    new JSpinner(snms[1]),
                                    new JSpinner(snms[2])};
	ColorSelectorComponent creator;
	boolean changing = false;

	private static final long serialVersionUID = 1L; // prevent warning

	public RGBColorSelectorComponent(ColorSelectorComponent creator)
	{
		this.creator = creator;

		setLayout(new BorderLayout(3,0));

		JPanel pnlCenter = new JPanel();
		pnlCenter.setLayout(new GridLayout(3,1));
		for (int i = 0; i < rgbSliders.length; ++i)
		{
			JSlider s = rgbSliders[i];
			s.setMajorTickSpacing(s.getMaximum());
			s.addChangeListener(this);
			pnlCenter.add(s);
		}

		JPanel pnlEast = new JPanel();
		pnlEast.setLayout(new GridLayout(3,1));
		for (int i = 0; i < rgbSpinners.length; ++i)
		{
			JSpinner s = rgbSpinners[i];
		  pnlEast.add(s);
		  s.addChangeListener(this);
    }

		JPanel pnlWest = new JPanel();
		pnlWest.setLayout(new GridLayout(3,1));
		pnlWest.add(new JLabel("R"));
		pnlWest.add(new JLabel("G"));
		pnlWest.add(new JLabel("B"));

    add(pnlCenter, BorderLayout.CENTER);
    add(pnlEast, BorderLayout.EAST);
    add(pnlWest, BorderLayout.WEST);
		setBorder(new TitledBorder(BorderFactory.createEtchedBorder(), "RGB Colors"));
	}

	public void updateSliders()
	{
	  int r = rgbSliders[0].getValue();
	  int g = rgbSliders[1].getValue();
	  int b = rgbSliders[2].getValue();

    rgbSliders[0].setMinColor(new Color(0, g, b));
    rgbSliders[0].setMaxColor(new Color(255, g, b));

    rgbSliders[1].setMinColor(new Color(r, 0, b));
    rgbSliders[1].setMaxColor(new Color(r, 255, b));

    rgbSliders[2].setMinColor(new Color(r, g, 0));
    rgbSliders[2].setMaxColor(new Color(r, g, 255));

    repaint();
  }

  public void updateSpinners()
  {
	  int r = rgbSliders[0].getValue();
	  int g = rgbSliders[1].getValue();
	  int b = rgbSliders[2].getValue();

    rgbSpinners[0].setValue(new Integer(r));
    rgbSpinners[1].setValue(new Integer(g));
    rgbSpinners[2].setValue(new Integer(b));
  }

	public void stateChanged(ChangeEvent e)
	{
		if (!changing)
		{
		  if (e.getSource() instanceof JSlider)
		    creator.updateColors(this,
                             rgbSliders[0].getValue(),
                             rgbSliders[1].getValue(),
                             rgbSliders[2].getValue());
		  else
		    creator.updateColors(this,
                             ((Integer)rgbSpinners[0].getValue()).intValue(),
                             ((Integer)rgbSpinners[1].getValue()).intValue(),
                             ((Integer)rgbSpinners[2].getValue()).intValue());
    }
	}

	/*
	 * 0 <= r, g, b <= 255
	 */
	public void updateColors(int r, int g, int b)
	{
		changing = true;
		rgbSliders[0].setValue(r);
		rgbSliders[1].setValue(g);
		rgbSliders[2].setValue(b);
		updateSliders();
		updateSpinners();
		changing = false;
	}

	public void updateColors(double h, double s, double v)
	{
		changing = true;

		//PRINTLN("updateColors!xxx!  h="+h +"  s"+s+"  v"+v);

		int[] rgb = ColorConverter.hsvToRgb(h,s,v);
		//PRINTLN("updateColors!xxx!  r="+rgb[0] +"  g"+rgb[1]+"  b"+rgb[2]);

		rgbSliders[0].setValue(rgb[0]);
		rgbSliders[1].setValue(rgb[1]);
		rgbSliders[2].setValue(rgb[2]);
		updateSliders();
		updateSpinners();
		changing = false;
	}
}

class HSVColorSelectorComponent extends JPanel implements ChangeListener
{
	private JColoredSlider[] hsvSliders = {new JHueSlider(JSlider.HORIZONTAL,
                                                        ColorConverter.MIN_HUE,
                                                        ColorConverter.MAX_HUE,
                                                        ColorConverter.MIN_HUE),  // h
	                                       new JColoredSlider(JSlider.HORIZONTAL,
                                                            ColorConverter.MIN_SATURATION,
                                                            ColorConverter.MAX_SATURATION,
                                                            ColorConverter.MIN_SATURATION),  // s
	                                       new JColoredSlider(JSlider.HORIZONTAL,
                                                            ColorConverter.MIN_VALUE,
                                                            ColorConverter.MAX_VALUE,
                                                            ColorConverter.MIN_VALUE)}; // v

  private SpinnerNumberModel[] hsvms = { new SpinnerNumberModel(ColorConverter.MIN_HUE,
                                                                ColorConverter.MIN_HUE,
                                                                ColorConverter.MAX_HUE,
                                                                1),
                                         new SpinnerNumberModel(ColorConverter.MIN_SATURATION,
                                                                ColorConverter.MIN_SATURATION,
                                                                ColorConverter.MAX_SATURATION,
                                                                1),
                                         new SpinnerNumberModel(ColorConverter.MAX_VALUE,
                                                                ColorConverter.MIN_VALUE,
                                                                ColorConverter.MAX_VALUE,
                                                                1) };

  private JSpinner[] hsvSpinners = {new JSpinner(hsvms[0]),
                                    new JSpinner(hsvms[1]),
                                    new JSpinner(hsvms[2])};
	ColorSelectorComponent creator;
	boolean changing = false;

	private static final long serialVersionUID = 1L; // prevent warning

	public HSVColorSelectorComponent(ColorSelectorComponent creator)
	{
		this.creator = creator;

		setLayout(new BorderLayout(3,0));

		JPanel pnlCenter = new JPanel();
		pnlCenter.setLayout(new GridLayout(3,1));

		for (int i = 0; i < hsvSliders.length; ++i)
		{

			JSlider s = hsvSliders[i];
			s.addChangeListener(this);
			pnlCenter.add(s);
		}
		JPanel pnlEast = new JPanel();
		pnlEast.setLayout(new GridLayout(3,1));
		for (int i = 0; i < hsvSpinners.length; ++i)
		{
			JSpinner s = hsvSpinners[i];
		  pnlEast.add(s);
		  s.addChangeListener(this);
    }

		JPanel pnlWest = new JPanel();
		pnlWest.setLayout(new GridLayout(3,1));
		pnlWest.add(new JLabel("H"));
		pnlWest.add(new JLabel("S"));
		pnlWest.add(new JLabel("V"));

    add(pnlCenter, BorderLayout.CENTER);
    add(pnlEast, BorderLayout.EAST);
    add(pnlWest, BorderLayout.WEST);
		setBorder(new TitledBorder(BorderFactory.createEtchedBorder(), "HSV Colors"));
	}

	private void updateSliders()
	{
	  float h = (float)hsvSliders[0].getValue();
	  float s = (float)hsvSliders[1].getValue();
	  float v = (float)hsvSliders[2].getValue();

	  ((JHueSlider)hsvSliders[0]).setSaturationAndValue(s, v);

    hsvSliders[1].setMinColor(ColorConverter.hsvToColor(h, 0f, v));
    hsvSliders[1].setMaxColor(ColorConverter.hsvToColor(h, 100f, v));

    hsvSliders[2].setMinColor(ColorConverter.hsvToColor(h, s, 0f));
    hsvSliders[2].setMaxColor(ColorConverter.hsvToColor(h, s, 100f));
		repaint();
  }

  public void updateSpinners()
  {
	  int h = hsvSliders[0].getValue();
	  int s = hsvSliders[1].getValue();
	  int v = hsvSliders[2].getValue();

    hsvSpinners[0].setValue(new Integer(h));
    hsvSpinners[1].setValue(new Integer(s));
    hsvSpinners[2].setValue(new Integer(v));
  }

	public void stateChanged(ChangeEvent e)
	{
		if (!changing)
		{
			//PRINTLN("stateChanged!  h="+hsvSliders[0].getValue() +"  s"+hsvSliders[1].getValue()+"  v"+hsvSliders[2].getValue());
			if (e.getSource() instanceof JSlider)
			{
		  	creator.updateColors(this,
		  	                             (double)hsvSliders[0].getValue(),
		  	                             (double)hsvSliders[1].getValue(),
		  	                             (double)hsvSliders[2].getValue());

			}
			else
			{
				creator.updateColors(this,
                                     (double)((Integer)hsvSpinners[0].getValue()).intValue(),
                                     (double)((Integer)hsvSpinners[1].getValue()).intValue(),
                                     (double)((Integer)hsvSpinners[2].getValue()).intValue());
			}
		}
	}

	/*
	 * 0 <= r, g, b <= 255
	 */
	public void updateColors(int r, int g, int b)
	{
		changing = true;
		double[] rgb = ColorConverter.rgbToHsv(r, g, b);
		hsvSliders[0].setValue((int)rgb[0]);
		hsvSliders[1].setValue((int)rgb[1]);
		hsvSliders[2].setValue((int)rgb[2]);
		updateSliders();
		updateSpinners();
		changing = false;
	}

	public void updateColors(double h, double s, double v)
	{
		//PRINTLN("updateColors!hsv!  h="+h +"  s"+s+"  v"+v);
		changing = true;
		hsvSliders[0].setValue((int)h);
		hsvSliders[1].setValue((int)s);
		hsvSliders[2].setValue((int)v);
		updateSliders();
		updateSpinners();
		changing = false;
	}
}

class HexRGBColorSelectorComponent extends JPanel implements ActionListener
{
	private boolean changing= false;
	private ColorSelectorComponent creator;
	private MaskFormatter formatter;
	private JFormattedTextField rgbHex;

	private static final long serialVersionUID = 1L; // prevent warning

	public HexRGBColorSelectorComponent(ColorSelectorComponent creator)
	{
		try
		{
			formatter = new MaskFormatter("HHHHHH");
			rgbHex = new JFormattedTextField(formatter);
			rgbHex.addActionListener(this);
		}
		catch (Exception pe) {}

		this.creator = creator;
		setLayout(new BorderLayout(3, 0));
		add(rgbHex, BorderLayout.NORTH);
		setBorder(new TitledBorder(BorderFactory.createEtchedBorder(), "RGB Hex Colors"));
	}

	public void actionPerformed(ActionEvent e)
	{
		if (!changing)
		{
			String hexStr = rgbHex.getText();

			try
			{
				int hex = Integer.parseInt(hexStr, 16);
				int r = (hex >> 16) & 0xFF;
				int g = (hex >> 8) & 0xFF;
				int b = hex & 0xFF;
				creator.updateColors(this, r, g, b);
			}
			catch (Exception ex)
			{
				ex.printStackTrace();
			}
		}
	}

	private void updateTextField(int r, int g, int b)
	{
		String text = STRFORMAT("%02x%02x%02x", r, g, b);
		rgbHex.setText(text);
	}

	public void updateColors(int r, int g, int b)
	{
		changing = true;
		updateTextField(r, g, b);
		changing = false;
	}

	public void updateColors(double h, double s, double v)
	{
		changing = true;

		int[] rgb = ColorConverter.hsvToRgb(h,s,v);
		updateTextField(rgb[0], rgb[1], rgb[2]);
		changing = false;
	}
}

class ExtendedHSVColorSelectorComponent extends JPanel implements MouseListener, MouseMotionListener
{
	private float  cAngle = 0f;
	private double cHue   = 0f;
	private double cValue = 0f;
	private double cSat   = 0f;
	private boolean circleDragging = false;
	private boolean triangleDragging = false;
	ColorSelectorComponent creator;

	private static final long serialVersionUID = 1L; // prevent warning

	public ExtendedHSVColorSelectorComponent(ColorSelectorComponent creator)
	{
		this.creator = creator;
		setPreferredSize(new Dimension(300, 300));
		setBorder(new TitledBorder(BorderFactory.createEtchedBorder(), "Extended HSV Colors"));
		addMouseListener(this);
		addMouseMotionListener(this);
	}

	/*
	 * 0 <= r, g, b <= 255
	 */
	public void updateColors(int r, int g, int b)
	{
		double[] hsv = ColorConverter.rgbToHsv(r, g, b);
		cHue   = hsv[0];
		cAngle = (float)hsv[0];
		cSat   = hsv[1];
		cValue = hsv[2];
		repaint();
	}

	public void updateColors(double h, double s, double v)
	{
		cAngle = (float)h;
		cHue   = h;
		cSat   = s;
		cValue = v;
		repaint();
	}

	public void mousePressed(MouseEvent e)
	{
		circleDragging = isInCircle(e.getX(), e.getY());
		triangleDragging = isInTriangle(e.getX(), e.getY());
		mouseDragged(e);
	}

	public void mouseReleased(MouseEvent e)
	{
		circleDragging = false;
		triangleDragging = false;
	}

	// 1-2 = line, 3 = point
	private Point getPointClosestToLine(int x1, int y1, int x2, int y2, int x3, int y3)
	{
		double u = ((x3-x1)*(x2-x1)) + ((y3-y1)*(y2-y1));
		u /= Point2D.distanceSq(x1, y1, x2, y2);
		if (u <= 0) return new Point(x1, y1);
		if (u >= 1) return new Point(x2, y2);
		return new Point((int)Math.round(x1 + u * (x2-x1)), (int)Math.round(y1 + u * (y2-y1)) );
	}

	public void mouseDragged(MouseEvent e)
	{
	  if (circleDragging)
	  {
			int x = getCenterX() - e.getX();
			int y = getCenterY() - e.getY();
	  	cAngle = getAngle(x, y);
	  	cHue = cAngle;
			creator.updateColors(this, cHue, cSat, cValue);
	  	repaint();
	  }

		if (triangleDragging) {
			int x = e.getX();
			int y = e.getY();

			int[] xs = new int[3];
			int[] ys = new int[3];

			xs[0] = getCenterX() + getX(Math.IEEEremainder(cAngle +   0f, 360f), getRadius());
			ys[0] = getCenterY() + getY(Math.IEEEremainder(cAngle +   0f, 360f), getRadius());

			xs[1] = getCenterX() + getX(Math.IEEEremainder(cAngle + 120f, 360f), getRadius());
			ys[1] = getCenterY() + getY(Math.IEEEremainder(cAngle + 120f, 360f), getRadius());

			xs[2] = getCenterX() + getX(Math.IEEEremainder(cAngle + 240f, 360f), getRadius());
			ys[2] = getCenterY() + getY(Math.IEEEremainder(cAngle + 240f, 360f), getRadius());

			int haxx = 0;
			if (!isInTriangle(x, y)) {
				Point[] p = new Point[3];
				double[] d = new double[3];
				for (int i = 0; i < 3; ++i) {
					p[i] = getPointClosestToLine(xs[i], ys[i], xs[(i+1)%3], ys[(i+1)%3], x, y);
					d[i] = p[i].distance(x, y);
				}

				for (int i = 0; i < 3; ++i) {
					if (d[i] <= d[(i+1)%3] && d[i] <= d[(i+2)%3]) {
						x = p[i].x;
						y = p[i].y;
						haxx |= 1 << i;
					}
				}
			}

			double max_v_dist = Line2D.ptLineDist(xs[0], ys[0], xs[1], ys[1], xs[2], ys[2]);
			double tr_v = Line2D.ptLineDist(xs[0], ys[0], xs[1], ys[1], x, y);
			tr_v /= max_v_dist;

			double max_s_dist = Point2D.distance(xs[0], ys[0], xs[1], ys[1]);
			double tr_s = Line2D.ptLineDist(xs[1], ys[1], xs[1] - (ys[0] - ys[1]), ys[1] + (xs[0] - xs[1]), x, y);
			tr_s -= tr_v * max_s_dist / 2;
			tr_v = 1 - tr_v;
			tr_s /= tr_v * max_s_dist;

			//tr_v = 1 - tr_v;
			//tr_s = 1 - tr_s;
			//PRINTLN("v = " + tr_v);
			//PRINTLN("s = " + tr_s);
			cSat = tr_s * ColorConverter.MAX_SATURATION;
			cValue = tr_v * ColorConverter.MAX_VALUE;

			if (0 != (haxx & 1)) cValue = 100;
			if (0 != (haxx & 2)) cSat = 0;
			if (0 != (haxx & 4)) cSat = 100;

			cHue = cAngle;
			creator.updateColors(this, cHue, cSat, cValue);
			repaint();
		}
	}

	private int getCenterX()
	{
		return (int)(getSize().getWidth() / 2);
	}

	private int getCenterY()
	{
		return (int)(getSize().getHeight() / 2);
	}

	private int getMin()
	{
		Insets bi = getInsets();
		int bw = bi.left + bi.right;
		int bh = bi.top + bi.bottom;
		int width = (int)getSize().getWidth() - bw;
		int height = (int)getSize().getHeight() - bh;
		return (width < height)?width:height;
	}

	private int getRadius()
	{
		return (int)(getMin() * (1 - ColorSelectorComponent.WHEEL_WIDTH)) / 2;
	}

	private boolean isInCircle(int x, int y)
	{
		// Check whether click was whithin color circle
		int dist = (int)Point2D.distance(getCenterX(), getCenterY(), x, y);
		return ((int)(getMin()*ColorSelectorComponent.WHEEL_WIDTH* 2) <= dist) &&
           (dist <= getMin()/2);
	}

	private boolean isInTriangle(int x, int y)
	{
		int[] xs = new int[3];
		int[] ys = new int[3];

		xs[0] = getCenterX() + getX(Math.IEEEremainder(cAngle +   0f, 360f), getRadius());
		ys[0] = getCenterY() + getY(Math.IEEEremainder(cAngle +   0f, 360f), getRadius());

		xs[1] = getCenterX() + getX(Math.IEEEremainder(cAngle + 120f, 360f), getRadius());
		ys[1] = getCenterY() + getY(Math.IEEEremainder(cAngle + 120f, 360f), getRadius());

		xs[2] = getCenterX() + getX(Math.IEEEremainder(cAngle + 240f, 360f), getRadius());
		ys[2] = getCenterY() + getY(Math.IEEEremainder(cAngle + 240f, 360f), getRadius());

		Polygon p = new Polygon(xs, ys, 3);

		//PRINTLN("--");
		//PRINTLN("x="+xs[0]+"  y="+ys[0]);
		//PRINTLN("x="+xs[1]+"  y="+ys[1]);
		//PRINTLN("x="+xs[2]+"  y="+ys[2]);
		//PRINTLN("x="+x+"  y="+y);

		//PRINTLN("r=" + p.contains(x, y));
		return p.contains(x, y);
	}

	public int getMaxRadius()
	{
		return getMin()/2;
	}

	public float getAngle(int x, int y)
	{
		float angle = (float)Math.toDegrees(Math.atan2(y, x));
		if (angle < 0) angle += 360;
		angle -= 180;
		if (angle < 0) angle += 360;
		return angle;
	}

	public void mouseClicked(MouseEvent e)
	{

	}

	public void paintComponent(Graphics g2)
	{
  	Graphics2D g = (Graphics2D)g2;
  	g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
  	                   RenderingHints.VALUE_ANTIALIAS_ON);

		g.setColor(getBackground());
		g.fillRect(0,0,(int)getSize().getWidth(), (int)getSize().getHeight());
		Insets bi = getInsets();
		int bw = bi.left + bi.right;
		int bh = bi.top + bi.bottom;
		int width = (int)getSize().getWidth() - bw;
		int height = (int)getSize().getHeight() - bh;
		int min = (width < height)?width:height;
		int x = ((int)(getSize().getWidth() / 2) - (min / 2));
		int y = ((int)(getSize().getHeight() / 2) - (min / 2));

		int r1 = min/2;
		int r2 = (int)(min * (1 - ColorSelectorComponent.WHEEL_WIDTH)) / 2;
		x = x + min / 2;
		y = y + min / 2;

    int precision = 256*3;

		for (int i = 0; i < precision; ++i)
		{
			g.setColor(ColorConverter.hsvToColor(i*(float)ColorConverter.MAX_HUE/((float)precision),
                                           (float)ColorConverter.MAX_SATURATION,
                                           (float)ColorConverter.MAX_VALUE));

			int[] xs = new int[4];
			int[] ys = new int[4];

			xs[0] = x + getX(i*360f/(precision), r1);
			xs[1] = x + getX(i*360f/(precision) + 1, r1);
			xs[2] = x + getX(i*360f/(precision) + 1, r2);
			xs[3] = x + getX(i*360f/(precision), r2);

			ys[0] = y + getY(i*360f/(precision), r1);
			ys[1] = y + getY(i*360f/(precision) + 1, r1);
			ys[2] = y + getY(i*360f/(precision) + 1, r2);
			ys[3] = y + getY(i*360f/(precision), r2);

			g.fillPolygon(xs, ys, 4);
		}

		// Draw circle pointer
		g.setColor(Color.WHITE);
		g.setStroke(new BasicStroke(2.0f));
		g.drawLine(x + getX(cAngle, r1),
		           y + getY(cAngle, r1),
							 x + getX(cAngle, r2),
							 y + getY(cAngle, r2));

		drawTriangle(g, x, y, r2, cAngle);

		int[] xs = new int[4];
		int[] ys = new int[4];

		xs[0] = getCenterX() + getX(Math.IEEEremainder(cAngle +   0f, 360f), getRadius());
		ys[0] = getCenterY() + getY(Math.IEEEremainder(cAngle +   0f, 360f), getRadius());

		xs[1] = getCenterX() + getX(Math.IEEEremainder(cAngle + 120f, 360f), getRadius());
		ys[1] = getCenterY() + getY(Math.IEEEremainder(cAngle + 120f, 360f), getRadius());

		xs[2] = getCenterX() + getX(Math.IEEEremainder(cAngle + 240f, 360f), getRadius());
		ys[2] = getCenterY() + getY(Math.IEEEremainder(cAngle + 240f, 360f), getRadius());

		xs[3] = (xs[0] + xs[1]) / 2;
		ys[3] = (ys[0] + ys[1]) / 2;
    // Draw circle pointer
    int cw = 2;

		double max_v_dist = Line2D.ptLineDist(xs[0], ys[0], xs[1], ys[1], xs[2], ys[2]);

		double max_s_dist = (cSat - 50) * 2;

		max_s_dist *= cValue;
		max_s_dist /= -100;

    x = xs[2];
    y = ys[2];
    x += (int)Math.round(cValue * (xs[3] - xs[2]) / 100);
    y += (int)Math.round(cValue * (ys[3] - ys[2]) / 100);
    x += (int)Math.round(max_s_dist * (xs[3] - xs[0]) / 100);
    y += (int)Math.round(max_s_dist * (ys[3] - ys[0]) / 100);
    g.setColor(Color.WHITE);
    g.setStroke(new BasicStroke(2.0f));
    // Magic 5... (5 * cw)
    g.drawOval(x - cw,
               y - cw,
               cw*2,
               cw*2);
	}

	public void drawTriangle(Graphics2D g, int x, int y, int radius, float angle)
	{
		int[] xs = new int[3];
		int[] ys = new int[3];

		xs[0] = x + getX(Math.IEEEremainder(angle +   0f, 360f), radius);
		ys[0] = y + getY(Math.IEEEremainder(angle +   0f, 360f), radius);

		xs[1] = x + getX(Math.IEEEremainder(angle + 120f, 360f), radius);
		ys[1] = y + getY(Math.IEEEremainder(angle + 120f, 360f), radius);

		xs[2] = x + getX(Math.IEEEremainder(angle + 240f, 360f), radius);
		ys[2] = y + getY(Math.IEEEremainder(angle + 240f, 360f), radius);

		Point[] p = new Point[3];
		p[0] = new Point(xs[0], ys[0]);
		p[1] = new Point(xs[1], ys[1]);
		p[2] = new Point(xs[2], ys[2]);

		Color[] c = new Color[3];
		c[0] = ColorConverter.hsvToColor(angle, 100f, 100f);
		c[1] = Color.WHITE;
		c[2] = Color.BLACK;

		g.setPaint(new TriGradientPaint(p, c));
		g.fillPolygon(xs, ys, 3);
	}

	private int getX(float degree, int radius)
	{
		return (int)(radius * (Math.cos(Math.toRadians(degree))));
	}

	private int getY(float degree, int radius)
	{
		return (int)(radius * (Math.sin(Math.toRadians(degree))));
	}

	private int getX(double degree, int radius)
	{
		return (int)(radius * (Math.cos(Math.toRadians(degree))));
	}

	private int getY(double degree, int radius)
	{
		return (int)(radius * (Math.sin(Math.toRadians(degree))));
	}
	public void mouseEntered(MouseEvent e) {}
	public void mouseExited(MouseEvent e) {}
	public void mouseMoved(MouseEvent e) {}
}

#endif
