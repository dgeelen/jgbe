#include "Global.inc"
#ifdef USE_JAVA_MOBILE
//TODO: Fix package name
//package gpl.emulation.jgbe;
import javax.microedition.lcdui.*;
import javax.microedition.midlet.*;
import javax.microedition.lcdui.game.GameCanvas;
import java.util.Vector;
import java.util.Enumeration;
import java.util.Random;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.DataInputStream;
import javax.microedition.rms.RecordStore;

#define BENCH_FRAMES (500)
public class jmgbe extends MIDlet implements CommandListener {
	Display display;
	jmgbeCanvas gCanvas;

	static final Command backCommand = new Command("Back", Command.BACK, 0);
	static final Command copyCommand1 = new Command("Copy To: Record-JMGBE", Command.SCREEN, 0);
	static final Command copyCommand2 = new Command("Copy To: Record-JMGBE-Local", Command.SCREEN, 0);
	static final Command copyCommand3 = new Command("Copy To: Record-JMGBE-Store", Command.SCREEN, 0);
	static final Command deleteCommand = new Command("Delete", Command.SCREEN, 0);
	static final Command exitCommand = new Command("Exit", Command.STOP, 2);
	Vector filemenu;
	Vector curitems;

	public void displayFileMenu()
	{
		List menulist = new List("Browse...", Choice.IMPLICIT);
		IVFSNode vn = (IVFSNode)filemenu.lastElement();
		if (!vn.isDir()) return;

		curitems = new Vector();
		Enumeration<IVFSNode> e = vn.getChildren();
		while (e.hasMoreElements()) {
			IVFSNode cn = (IVFSNode)e.nextElement();
			menulist.append(cn.getName(), null);
			curitems.addElement(cn);
		}
		if (filemenu.size() > 1)
			menulist.addCommand(backCommand);
		//if (MeBoyVFS.getNodeFromPath("/Record-JMGBE") != null)
			menulist.addCommand(copyCommand1);
		//if (MeBoyVFS.getNodeFromPath("/Record-JMGBE-Local") != null)
			menulist.addCommand(copyCommand2);
		//if (MeBoyVFS.getNodeFromPath("/Record-JMGBE-Store") != null)
			menulist.addCommand(copyCommand3);
		if (vn.getClass().getName().equals(new VFSRecStore("",null,-1).getClass().getName())) // FIX?: Add canDelete() to interface?
			menulist.addCommand(deleteCommand);
		menulist.setCommandListener(this);
		display.setCurrent(menulist);
	}

	public void commandAction(Command c, Displayable d) {
		String label = c.getLabel();
		PRINTLN("Command: " + label);
		if (label.equals("Exit")) {
			destroyApp(true);
		} else if (label.equals("Back")) {
			filemenu.removeElementAt(filemenu.size()-1);
			displayFileMenu();
		} else {
			List down = (List)display.getCurrent();
			IVFSNode cn = (IVFSNode)curitems.elementAt(down.getSelectedIndex());
			PRINTLN("Chosen: " + cn.getName());
			if (label.startsWith("Copy To: ")) {
				if (cn.isFile()) CopyFile(label.substring(9), cn);
			} else if (label.equals("Delete")) {
				IVFSNode pn = (IVFSNode)filemenu.lastElement();
				pn.delete(cn.getName());
				displayFileMenu();
			} else {
				if (cn.isDir()) {
					filemenu.addElement(cn);
					displayFileMenu();
				} else if (cn.isFile()) {
					loadCartridge(cn);
				}
			}
		}
	}

	public jmgbe() {
		gCanvas = new jmgbeCanvas(this);
	}

	public void loadCartridge(IVFSNode cn) {
		filemenu = null;
		curitems = null;
		gCanvas.loadCartridge(cn);
		display.setCurrent(gCanvas);
	}

	public void CopyFile(String targetroot, IVFSNode srcFile) {
		PRINTLN("Copying " + srcFile.getName() + " to " + targetroot);
		try {
			IVFSNode rsnode = MeBoyVFS.getNodeFromPath("/" + targetroot);
			PRINTLN("got " + rsnode + " = " + rsnode.getName());
			IVFSNode outnode = rsnode.createDir("roms").createFile(srcFile.getName());

			InputStream is = srcFile.getInputStream();
			OutputStream os = outnode.getOutputStream();
			byte[] buffer = new byte[1024];
			int read = is.read(buffer);
			while (read > 0) {
				os.write(buffer, 0, read);
				read = is.read(buffer);
			}
			os.flush();
		} catch (Throwable e) { PRINTLN(e.toString()); }
	}

	public void startApp() {
		display = Display.getDisplay(this);

		IVFSNode cartnode = null;
		//if (cartnode == null) cartnode = MeBoyVFS.getNodeFromPath("/jar/sml1.gb");
		//if (cartnode == null) cartnode = MeBoyVFS.getNodeFromPath("/Record-JMGBE/roms/sml1.gb");
		//if (cartnode == null) cartnode = MeBoyVFS.getNodeFromPath("/Record-JMGBE-Local/roms/sml1.gb");
		//if (cartnode == null) cartnode = MeBoyVFS.getNodeFromPath("/Record-JMGBE-Store/roms/sml1.gb");
		//if (cartnode == null) cartnode = MeBoyVFS.getNodeFromPath("/filesystem/roms/sml1.gb");

		if (cartnode == null) {
			IVFSNode root = VFSRoot.getRoot();
			filemenu = new Vector();
			filemenu.addElement(root);
			displayFileMenu();
		} else
			loadCartridge(cartnode);
	}

	public void notifyTestRun(long startms, long stopms) {
		long durms = stopms-startms;
		Form form = new Form("Test run");
		display.setCurrent(form);
		int frames = BENCH_FRAMES*CPU.VC.fskip;
		form.append("" + BENCH_FRAMES + " * " + CPU.VC.fskip + " frames = " + frames + "\n");
		form.append("start: " + stopms + "\n");
		form.append("stop : " + startms + "\n");
		form.append("dur  : " + durms + "\n");
		form.append("Drawn fps % = " + BENCH_FRAMES*100*1000 / durms + "\n");
		form.append("Real  fps % = " + frames*100*1000 / durms + "\n");
	}

	public void pauseApp() {
	}

	public void destroyApp(boolean unconditional) {
	}
}

class jmgbeCanvas extends GameCanvas implements Runnable, IVideoListener {
	private static final int SLEEP_INCREMENT = 10;
	private static final int SLEEP_INITIAL = 150;
	private static final int SLEEP_MAX = 300;

	private Graphics        graphics;
	private Random          random;
	private int             sleepTime = SLEEP_INITIAL;
	private CPU cpu;
	private Cartridge cartridge;
	private int w, h;

	private Thread thread;

	private jmgbe parent;

	public void listAll(IVFSNode n, Vector v) {
			PRINTLN(".");

		Enumeration e = n.getChildren();
		if (e != null) {
			while (e.hasMoreElements()) {
				listAll((IVFSNode)e.nextElement(), v);
			}
		} else {
			v.addElement(n);
		}
	};

	public jmgbeCanvas(jmgbe p){
		super( false );
		graphics = getGraphics();
		parent = p;
		setFullScreenMode(true);
		PRINTFREEMEM("pre cartridge");
		System.gc();
		PRINTFREEMEM("pre CPU");
		cpu = new CPU();
		PRINTFREEMEM("pre CPU");
		cpu.VC.addListener(this);

	}

	public void loadCartridge(IVFSNode node)
	{
		cpu.loadCartridge(null);
		System.gc();
		cartridge = new Cartridge(node.getInputStream());
		cpu.loadCartridge(cartridge);
	}

	int fctr = 0;

	public void drawString(String str, int x, int y) {
		int lx = x > 0 ? x - 1 : 0;
		int ly = y > 0 ? y - 1 : 0;
		lx = x - 1;
		ly = y - 1;
		int rx = x + 1;
		int ry = y + 1;
		graphics.setColor( 255, 0, 0 );

		graphics.drawString(str, x, ly, Graphics.TOP|Graphics.LEFT);
		graphics.drawString(str, x, ry, Graphics.TOP|Graphics.LEFT);
		graphics.drawString(str, lx, y, Graphics.TOP|Graphics.LEFT);
		graphics.drawString(str, rx, y, Graphics.TOP|Graphics.LEFT);
		//graphics.setColor( 255, 255, 0 );
		graphics.setColor( 255, 255, 255 );
		graphics.drawString(str, x, y, Graphics.TOP|Graphics.LEFT);
	}

	// When the game canvas is hidden, stop the thread.
	public void newVideoImage() {
		graphics.drawRGB(cpu.VC.blitImg, 0, 128, 0, 0, 128, 160, false);
		++fctr;
		/*
		{
			drawString(mstr, 0, 0);
			long runms = System.currentTimeMillis() - startms;
			drawString("fps: " + fctr * 100000 / runms + " (" + fctr + ")", 0, 11);
			String memstate = "" + (Runtime.getRuntime().totalMemory()-Runtime.getRuntime().freeMemory())/1024 + "/" + Runtime.getRuntime().totalMemory()/1024 + " (" + Runtime.getRuntime().freeMemory()/1024 + ")";
			drawString(memstate, 0, 22);
		}
		*/
		flushGraphics();
		if (fctr == BENCH_FRAMES) {
			stopms = System.currentTimeMillis();
			CPU.keeprunning = false;
		}
	}
/*
	protected void paint(Graphics graphics) {
		for (int t = 0; t < 3; ++t)
			try {
			/ *
				int[] imgarr = new int[w*(h-40)];

				for (int i = 0; i < imgarr.length; ++i)
					imgarr[i] = (i) * 0x010101;//Math.abs( random.nextInt() ) & 0xffffff;

				graphics.setColor( 0,  0, 0 );
				graphics.fillRect( 0, 0, w, 43 );
				graphics.setColor( 255, 255, 255 );
				graphics.drawString("i: " + CPU.TotalInstrCount, 0, 0, Graphics.TOP|Graphics.LEFT);
				graphics.drawString("c: " + CPU.TotalCycleCount, 0, 10, Graphics.TOP|Graphics.LEFT);
				graphics.drawString("f: " + fctr++, 0, 20, Graphics.TOP|Graphics.LEFT);
				* /
				//graphics.drawImage(Image.createRGBImage(cpu.VC.blitImg, 128, 160, false),0,0, Graphics.TOP | Graphics.LEFT);
				graphics.drawRGB(cpu.VC.blitImg, 0, 128, 0, 0, 128, 160, false);
				graphics.setColor( 255, 255, 255 );
				graphics.drawString(mstr, 0, 0, Graphics.TOP|Graphics.LEFT);
				graphics.drawString("f: " + fctr++, 0, 10, Graphics.TOP|Graphics.LEFT);
				String memstate = "" + (Runtime.getRuntime().totalMemory()-Runtime.getRuntime().freeMemory())/1024 + "/" + Runtime.getRuntime().totalMemory()/1024 + " (" + Runtime.getRuntime().freeMemory()/1024 + ")";
				graphics.drawString(memstate, 0, 20, Graphics.TOP|Graphics.LEFT);

				t = 10;
			} catch (Throwable e) {
				PRINTFREEMEM("oom - pre gc");
				System.gc();
				PRINTFREEMEM("oom - post gc");
			}
		//flushGraphics();
		//System.gc();
		//Thread.yield();
		//PRINTFREEMEM("post frame");
	}
*/
	int getKeyMask(int code) {
		int ret = 0;
		if (code == 48) CPU.keeprunning = false;
		int act = getGameAction(code);
		     if (act == UP)        ret = 1<<0;
		else if (act == DOWN)      ret = 1<<1;
		else if (act == LEFT)      ret = 1<<2;
		else if (act == RIGHT)     ret = 1<<3;
		else if (act == GAME_A)    ret = 1<<4;
		else if (act == GAME_B)    ret = 1<<5;
		else if (act == GAME_C)    ret = 1<<6;
		else if (act == GAME_D)    ret = 1<<7;
		else if (code == KEY_NUM7) ret = 1<<4;
		else if (code == KEY_NUM0) ret = 1<<5;
		else if (code == KEY_NUM1) ret = 1<<6;
		else if (code == KEY_NUM3) ret = 1<<7;
		else if (code == KEY_NUM2) ret = 1<<0;
		else if (code == KEY_NUM5) ret = 1<<1;
		else if (code == KEY_NUM4) ret = 1<<2;
		else if (code == KEY_NUM6) ret = 1<<3;
		else if (code == KEY_NUM8) ret = 1<<7;

		PRINTLN("key="+ret);
		return (ret);
	}

	String mstr = "";

	protected void keyPressed(int keyCode) {
		//synchronized(mstr) {
			mstr = "keydown: " + keyCode + " (" + getKeyMask(keyCode) + ")";
		//}
		cpu.pressButton(getKeyMask(keyCode));
	}

	protected void keyReleased(int keyCode) {
		cpu.releaseButton(getKeyMask(keyCode));
		//synchronized(mstr) {
			mstr = "keyup: " + keyCode + " (" + getKeyMask(keyCode) + ")";
		//}
	}

	protected void hideNotify(){
	}

	// The game loop.
	long startms;
	long stopms;
	public void run(){
		w = getWidth();
		h = getHeight() - 1;

		w = 128;
		h = 159;

		PRINTFREEMEM("pre gc");
		System.gc();
		PRINTFREEMEM("pre new (" + w + "," + h + "," + w*(h-40) + ")");
		PRINTFREEMEM("post new");
		System.gc();
		PRINTFREEMEM("post gc");

		startms = System.currentTimeMillis();
		try {
				try {
					CPU.runloop();
				} catch (Throwable e) {
					System.out.println(e.getMessage());
					e.printStackTrace();
					PRINTFREEMEM("pre gc");
					System.gc();
					PRINTFREEMEM("post gc");
					Thread.sleep(10000);
				}
			parent.notifyTestRun(startms, stopms);
			//parent.notifyDestroyed();
			/*
			while(true) {
				// Increment or decrement the scrolling interval
				// based on key presses

				int state = getKeyStates();

				if( ( state & DOWN_PRESSED ) != 0 ){
					sleepTime += SLEEP_INCREMENT;
					if( sleepTime > SLEEP_MAX )
						sleepTime = SLEEP_MAX;
				} else if( ( state & UP_PRESSED ) != 0 ){
					sleepTime -= SLEEP_INCREMENT;
					if( sleepTime < 0 ) sleepTime = 0;
				}

				// Repaint the screen by first scrolling the
				// existing starfield down one and painting in
				// new stars...
				graphics.copyArea( 0, 42, w, h-43, 0, 43, Graphics.TOP | Graphics.LEFT );
				graphics.setColor( 0,  0, 0 );
				graphics.fillRect( 0, 0, w, 43 );
				graphics.setColor( 255, 255, 255 );
				graphics.drawString("w: " + w, 0,  0, Graphics.TOP|Graphics.LEFT);
				graphics.drawString("h: " + h, 0, 10, Graphics.TOP|Graphics.LEFT);
				graphics.drawString("f: " + fctr++, 0, 20, Graphics.TOP|Graphics.LEFT);

				for (int i = 0; i < imgarr.length; ++i)
					imgarr[i] = (i+fctr) * 0x010101;//Math.abs( random.nextInt() ) & 0xffffff;
				//graphics.drawImage(img, 0,40, Graphics.TOP | Graphics.LEFT);

				try {
					//PRINTFREEMEM("pre blit");
					graphics.drawImage(Image.createRGBImage(imgarr, w, h-40, false),0,40, Graphics.TOP | Graphics.LEFT);
					//PRINTFREEMEM("post blit");
				} catch (Throwable e) {
					System.gc();
					graphics.drawImage(Image.createRGBImage(imgarr, w, h-40, false),0,40, Graphics.TOP | Graphics.LEFT);
				}

				flushGraphics();

				// Now wait...
				try {
					//Thread.sleep(sleepTime);
				} catch(Throwable e) {
				}
			}
				*/
		} catch (Throwable e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}
	}

	// When the canvas is shown, start a thread to
	// run the game loop.

	protected void showNotify(){
		random = new Random();

		thread = new Thread( this );
		thread.start();
	}
}
#else
	public class jmgbe {} //DUMMY FOR JAVA 1.5
#endif
