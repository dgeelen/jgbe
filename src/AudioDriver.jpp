#ifndef USE_JAVA_MOBILE

#include "Global.inc"
import java.io.*;
import javax.sound.sampled.*;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class AudioDriver implements IAudioListener {
	SourceDataLine audioSource;
	Mixer.Info mixerinfo;
	OutputStream dumpStream;
	byte[] audioBuffer;
	int audioBufferIndex;
	int sampleRate;
	int audioBufferSize;
	int sampleSize;
	int frameSize;
	int outputInterval;
	int channels;
	boolean signedSound;
	boolean bigEndianSound;

	public AudioDriver() {
		audioBufferIndex = 0;
		audioBufferSize = 4096;
		audioBuffer = new byte[audioBufferSize];
		sampleRate = 44100;
		sampleSize = 8;
		channels = 2;
		frameSize = 2;
		signedSound = true;
		bigEndianSound = true;
		outputInterval=1<<6;
		Mixer.Info[] mi = AudioSystem.getMixerInfo();
		mixerinfo=mi[0]; // FIXME: Will fail when no mixers are present
	}

	public void stop() {
		if(audioSource != null) {
			audioSource.stop();
			audioSource.close();
		}
	}

	public void start() {
		try {
			if(audioSource != null) {
				audioSource.open(new AudioFormat(sampleRate, sampleSize, channels, signedSound, bigEndianSound), audioBufferSize);
				audioSource.start();
			}
		}
		catch(LineUnavailableException e) {
				PRINTLN("Note: Sound will be unavailable");
			}
	}

	public boolean update() {
// 		PRINTLN("sampleRate="+sampleRate+" sampleSize="+sampleSize+" channels="+channels+" signedSound="+signedSound+" bigEndianSound="+bigEndianSound+" audioBufferSize="+audioBufferSize+" mixer="+mixerinfo);
		frameSize = (sampleSize+7)/8*channels;
// 		PRINTLN(frameSize);
		AudioFormat af = new AudioFormat(sampleRate, sampleSize, channels, signedSound, bigEndianSound);
		DataLine.Info di = new DataLine.Info(SourceDataLine.class, af, audioBufferSize);
		Mixer m = AudioSystem.getMixer(mixerinfo);
		if(m.isLineSupported(di)) {
			try {
				stop();
				SourceDataLine sdl = (SourceDataLine)m.getLine(di);
				audioSource = sdl;
				audioBuffer = new byte[audioBufferSize];
				audioBufferIndex = audioBufferSize - (channels * sampleSize);
				start();
				AudioController.setSampleRate(sampleRate);
				return true;
			}
			catch(LineUnavailableException e) {
				PRINTLN("Note: Sound will be unavailable");
			}
		}
		return false;
	};

	public int getFrameSize() {
		return frameSize;
	}

	public int getChannels() {
		return channels;
	}

	public void setChannels(int n) {
		channels = n;
		audioBufferIndex = (frameSize)*(audioBufferIndex/(frameSize));;
		update();
	}

	public Mixer.Info getMixerInfo() {
		return mixerinfo;
	}

	public boolean setMixerInfo(String adName, String adVendor, String adDescription, String adVersion) {
// 		PRINTLN("+  name="+adName+" vendor="+adVendor+" desc="+adDescription+" version="+adVersion);
		Mixer.Info[] mi = AudioSystem.getMixerInfo();
		for(int i=0; i<mi.length; ++i) {
// 			PRINTLN("-  name="+mi[i].getName()+" vendor="+mi[i].getVendor()+" desc="+mi[i].getDescription()+" version="+mi[i].getVersion());
			if(mi[i].getName().equals(adName)
			   && mi[i].getVendor().equals(adVendor)
			   && mi[i].getDescription().equals(adDescription)
			   && mi[i].getVersion().equals(adVersion)) return setMixerInfo(mi[i]);
		}
		return false;
	}

	public boolean setMixerInfo(Mixer.Info minfo) {
		Mixer.Info tmp = mixerinfo;
		mixerinfo = minfo;
		if( update() ) return true;
// 		PRINTLN("FAIL");
		mixerinfo = tmp;
		return false;
	}

	public int getBufferSize() {
		return audioBufferSize;
	}

	public int getOutputInterval() {
		return outputInterval;
	}

	public boolean setOutputInterval(int n) {
		outputInterval = (frameSize)*(n/(frameSize));
		if(outputInterval >= audioBufferSize -1 - (frameSize))
			outputInterval = audioBufferSize - (frameSize);
		outputInterval = Math.max((frameSize), outputInterval);
		return true;
	}

	public boolean setBufferSize(int n) {
		audioBufferSize = (frameSize)*(n/(frameSize));;
		setOutputInterval(Math.min(audioBufferSize, outputInterval));
		if(audioBufferIndex >= audioBufferSize - (frameSize)) audioBufferIndex=(audioBufferSize)-(frameSize);
		audioBuffer = new byte[n];
		return update();
	}

	public int getSampleRate() {
		return sampleRate;
	}

	public boolean setSampleRate(int sr) {
		sampleRate = sr;
		return update();
	}

	public void writeAudioSample(byte l, byte r) {
		if(channels==2) {
			audioBuffer[audioBufferIndex++] = l;
			audioBuffer[audioBufferIndex++] = r;
		}
		else {
			audioBuffer[audioBufferIndex++] = (byte)((l + r)/2);
		}
		if(audioBufferIndex >= outputInterval) {
			if(audioSource!=null) {
					audioSource.write(audioBuffer, 0, audioBufferIndex);
			}
			if(dumpStream!=null) {
				// convert from s8 to u8 for mplayer
				for (int i = 0; i < audioBufferIndex; ++i)
					audioBuffer[i] = (byte)(audioBuffer[i] + 128);
					//audioBuffer[i] = (byte)(2*(audioBuffer[i]) + 128); //hax double power

				try {
					dumpStream.write(audioBuffer, 0, audioBufferIndex);
				} catch (IOException e) {
				}
			}
			audioBufferIndex = 0;
		}
	}

	public void writeAudioSample(byte[] b) {
		ASSERT(false); //Currently broken
	}

	public void reset() {
		audioBufferIndex = 0;
	}

	public void setDumpStream(java.io.DataOutputStream dos)
	{
		dumpStream = dos;
	}
}
#else
#include "MobileAudioDriver.inc"
#endif
